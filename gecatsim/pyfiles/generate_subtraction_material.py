# Copyright 2024, GE Precision HealthCare. All rights reserved. See https://github.com/xcist/main/tree/master/license
import os
import numpy as np
import matplotlib.pyplot as plt
from gecatsim.pyfiles.ReadMaterialFile import ReadMaterialFile
from gecatsim.pyfiles.GetMu import GetMu

def generate_subtraction_material(mt1, mt2, mt_new, testing_on=False):
    try:
        _, AtomicNumbers1, NormalizedMassFractions1, Density1 = ReadMaterialFile(mt1)
        _, AtomicNumbers2, NormalizedMassFractions2, Density2 = ReadMaterialFile(mt2)
    except (IndexError, ValueError):
        return [], [], 0.0

    AtomicNumbers_new = np.union1d(AtomicNumbers1, AtomicNumbers2)
    NormalizedMassFractions_new = np.zeros_like(AtomicNumbers_new)

    for a in AtomicNumbers_new:
        mf1 = NormalizedMassFractions1[AtomicNumbers1 == a] * Density1
        mf2 = NormalizedMassFractions2[AtomicNumbers2 == a] * Density2

        if len(mf1) == 0:
            mf1 = 0
        if len(mf2) == 0:
            mf2 = 0

        NormalizedMassFractions_new[AtomicNumbers_new == a] = mf1 - mf2

    AtomicNumbers_new = AtomicNumbers_new[NormalizedMassFractions_new != 0]
    NormalizedMassFractions_new = NormalizedMassFractions_new[NormalizedMassFractions_new != 0]
    N = len(AtomicNumbers_new)
    Density_new = np.sum(NormalizedMassFractions_new)

    with open(mt_new, 'wt') as fid:
        fid.write(f'%% This material = {mt1} - {mt2}\n')
        fid.write('%% Generated by generate_subtruction_material.py\n\n')
        fid.write(f'{N}\n')
        fid.write(f'{Density_new}\n')
        for ii in range(N):
            fid.write(f'{AtomicNumbers_new[ii]} {NormalizedMassFractions_new[ii]}\n')

    # Testing
    if testing_on:
        ee = np.arange(0, 160)
        m1 = GetMu(mt1, ee)
        m2 = GetMu(mt2, ee)
        m_new = GetMu(mt_new, ee)

        plt.figure()
        plt.semilogy(ee, m1 - m2)
        plt.semilogy(ee, m_new, '.')
        plt.legend(['Subtraction of two materials', 'New material'])
        plt.title('Linear attenuation coefficients')
        plt.xlabel('X-ray energy (keV)')
        plt.ylabel('Mu')

        plt.figure()
        plt.plot(ee, m_new / (m1 - m2))
        plt.title('Mu ratio of the materials')
        plt.xlabel('X-ray energy (keV)')

    return AtomicNumbers_new, NormalizedMassFractions_new, Density_new